<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.37">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>environment_id</string>
        <string>cfn_template_url</string>
        <string>cfn_template_vars</string>
        <string>cfn_stack_name</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>environment_id</name>
          <description>Environment identifier (translates to Cloudify deployment ID)</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cfn_stack_name</name>
          <description>CloudFormation stack name to create</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cfn_template_url</name>
          <description>URL of the CloudFormation template</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>cfn_template_vars</name>
          <description>CloudFormation template variables (as YAML or JSON)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.7">
          <name>aws_credentials</name>
          <description>Credentials for AWS</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.7">
          <name>cfy_credentials</name>
          <description></description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.common.StandardCredentials</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>pipeline {
    agent any
    
    parameters {
        string(name: &apos;environment_id&apos;, description: &apos;Environment identifier (translates to Cloudify deployment ID)&apos;, trim: true)
        string(name: &apos;cfn_stack_name&apos;, description: &apos;CloudFormation stack name to create&apos;, trim: true)
        string(name: &apos;cfn_template_url&apos;, description: &apos;URL of the CloudFormation template&apos;, trim: true)
        text(name: &apos;cfn_template_vars&apos;, description: &apos;CloudFormation template variables (as YAML or JSON)&apos;)
    }

    stages {
        stage(&apos;AWS using Cloudformation&apos;) {
            steps {
                script {
                    def cfn_template_vars_map = readYaml text: &quot;${params.cfn_template_vars}&quot;

                    withCredentials([[
                        $class: &apos;AmazonWebServicesCredentialsBinding&apos;,
                        accessKeyVariable: &apos;AWS_ACCESS_KEY_ID&apos;,
                        credentialsId: &quot;${params.aws_credentials}&quot;,
                        secretKeyVariable: &apos;AWS_SECRET_ACCESS_KEY&apos;]]) {

                        withCredentials([usernamePassword(
                            credentialsId: &quot;${params.cfy_credentials}&quot;,
                            passwordVariable: &apos;CFY_PASSWORD&apos;,
                            usernameVariable: &apos;CFY_USERNAME&apos;)]) {

                            cfyCloudFormation username: &quot;${CFY_USERNAME}&quot;,
                                password: &quot;${CFY_PASSWORD}&quot;,
                                accessKeyIdAsString: &quot;${AWS_ACCESS_KEY_ID}&quot;,
                                deploymentId: &quot;${params.environment_id}&quot;,
                                echoEnvData: true,
                                envDataLocation: &apos;env-data.json&apos;,
                                parameters: cfn_template_vars_map,
                                secretAccessKeyAsString: &quot;${AWS_SECRET_ACCESS_KEY}&quot;,
                                stackName: &quot;${params.cfn_stack_name}&quot;,
                                templateUrl: &quot;${params.cfn_template_url}&quot;
                        }
                    }
                }
            }
        }
        stage(&apos;Wait for Input&apos;) {
            steps {
                input message: &apos;Proceed?&apos;
            }
        }
        stage(&apos;Destroy CloudFormation environment&apos;) {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: &quot;${params.cfy_credentials}&quot;,
                    passwordVariable: &apos;CFY_PASSWORD&apos;,
                    usernameVariable: &apos;CFY_USERNAME&apos;)]) {
                        
                    deleteCloudifyEnv username: &quot;${CFY_USERNAME}&quot;,
                        password: &quot;${CFY_PASSWORD}&quot;,
                        deleteBlueprintIfLast: false,
                        deploymentId: &quot;${params.environment_id}&quot;,
                        ignoreFailure: false
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>