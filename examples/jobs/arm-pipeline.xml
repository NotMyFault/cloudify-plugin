<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.37">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>arm_resource_group</string>
        <string>environment_id</string>
        <string>arm_template_url</string>
        <string>arm_template_vars</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>environment_id</name>
          <description>Environment identifier (translates to Cloudify deployment ID)</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>arm_template_url</name>
          <description>URL of the ARM template</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>arm_template_vars</name>
          <description>ARM template variables (as YAML or JSON)</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>arm_resource_group</name>
          <description>Resource group to create on Azure</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.7">
          <name>azure_credentials</name>
          <description>Credentials for Azure</description>
          <defaultValue></defaultValue>
          <credentialType>com.microsoft.azure.util.AzureCredentials</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.7">
          <name>cfy_credentials</name>
          <description>Credentials for Cloudify</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.common.StandardCredentials</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>pipeline {
    agent any
    
    parameters {
        string(name: &apos;environment_id&apos;, description: &apos;Environment identifier (translates to Cloudify deployment ID)&apos;, trim: true)
        string(name: &apos;arm_template_url&apos;, description: &apos;URL of the ARM template&apos;, trim: true)
        text(name: &apos;arm_template_vars&apos;, description: &apos;ARM template variables (as YAML or JSON)&apos;)
        string(name: &apos;arm_resource_group&apos;, description: &apos;Resource group to create on Azure&apos;, trim: true)
    }

    stages {
        stage(&apos;Azure using ARM&apos;) {
            steps {
                script {
                    def arm_template_vars_map = readYaml text: &quot;${params.arm_template_vars}&quot;

                    withCredentials([azureServicePrincipal(&quot;${params.azure_credentials}&quot;)]) {
    
                        withCredentials([usernamePassword(
                            credentialsId: &quot;${params.cfy_credentials}&quot;,
                            passwordVariable: &apos;CFY_PASSWORD&apos;,
                            usernameVariable: &apos;CFY_USERNAME&apos;)]) {
                                
                                cfyAzureArm username: &quot;${CFY_USERNAME}&quot;,
                                    password: &quot;${CFY_PASSWORD}&quot;,
                                    clientId: &quot;${AZURE_CLIENT_ID}&quot;,
                                    clientSecretAsString: &quot;${AZURE_CLIENT_SECRET}&quot;,
                                    deploymentId: &quot;${params.environment_id}&quot;,
                                    echoEnvData: true,
                                    envDataLocation: &apos;env-arm.json&apos;,
                                    parameters: arm_template_vars_map,
                                    resourceGroupName: &quot;${params.arm_resource_group}&quot;,
                                    subscriptionId: &quot;${AZURE_SUBSCRIPTION_ID}&quot;,
                                    templateFile: &quot;${params.arm_template_url}&quot;,
                                    tenantId: &quot;${AZURE_TENANT_ID}&quot;
                        }
                    }
                }
            }
        }
        stage(&apos;Wait for Input&apos;) {
            steps {
                input message: &apos;Proceed?&apos;
            }
        }
        stage(&apos;Destroy Azure ARM environment&apos;) {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: &quot;${params.cfy_credentials}&quot;,
                    passwordVariable: &apos;CFY_PASSWORD&apos;,
                    usernameVariable: &apos;CFY_USERNAME&apos;)]) {

                    deleteCloudifyEnv username: &quot;${CFY_USERNAME}&quot;,
                        password: &quot;${CFY_PASSWORD}&quot;,
                        deleteBlueprintIfLast: false,
                        deploymentId: &quot;${params.environment_id}&quot;,
                        ignoreFailure: false
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>