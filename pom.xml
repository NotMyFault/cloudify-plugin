<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.jenkins-ci.plugins</groupId>
		<artifactId>plugin</artifactId>
		<version>3.50</version>
		<relativePath />
	</parent>
	<groupId>co.cloudify.plugins</groupId>
	<artifactId>cloudify-jenkins-plugin</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>hpi</packaging>
	<properties>
		<jenkins.version>2.204.2</jenkins.version>
		<java.level>8</java.level>
		<!-- Needs to be called this way... it's used by the parent project -->
		<slf4jVersion>1.7.26</slf4jVersion>
		<jersey.version>2.27</jersey.version>
		<!-- The Jackson version must be compatible with both Jersey and Jenkins' parent POM. -->
		<jackson.version>2.9.0</jackson.version>
	</properties>
	<name>Cloudify Plugin for Jenkins</name>
	<!-- The default licence for Jenkins OSS Plugins is MIT. Substitute for 
		the applicable one if needed. -->
	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://opensource.org/licenses/MIT</url>
		</license>
	</licenses>
	<!-- If you want this to appear on the wiki page: <developers> <developer> 
		<id>bhacker</id> <name>Bob Q. Hacker</name> <email>bhacker@nowhere.net</email> 
		</developer> </developers> -->

	<!-- Assuming you want to host on @jenkinsci: <url>https://github.com/jenkinsci/${project.artifactId}-plugin</url> 
		<scm> <connection>scm:git:git://github.com/jenkinsci/${project.artifactId}-plugin.git</connection> 
		<developerConnection>scm:git:git@github.com:jenkinsci/${project.artifactId}-plugin.git</developerConnection> 
		<url>https://github.com/jenkinsci/${project.artifactId}-plugin</url> </scm> -->
	<repositories>
		<repository>
			<id>repo.jenkins-ci.org</id>
			<url>https://repo.jenkins-ci.org/public/</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>repo.jenkins-ci.org</id>
			<url>https://repo.jenkins-ci.org/public/</url>
		</pluginRepository>
	</pluginRepositories>
	<dependencies>
		<!--
		<dependency>
			<groupId>org.jenkins-ci.plugins</groupId>
			<artifactId>structs</artifactId>
			<version>1.10</version>
		</dependency>
		-->
		<dependency>
			<groupId>co.cloudify</groupId>
			<artifactId>rest-client</artifactId>
			<version>5.0.5</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<!--
		We need these Jackson dependencies during compile time as well.
		These are already included in Jersey (see below), however we depend
		on Jersey at runtime scope, which means that Jackson wouldn't be available
		at compile time. Changing Jersey's scope to "compile" would be less desireable,
		as I'd like my compile-time classpath to be as narrow as possible.
		-->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!--
		Runtime dependencies.
		We ship with the latest version of Jersey that is supported by Jenkins' POM.
		-->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>jakarta.ws.rs</groupId>
					<artifactId>jakarta.ws.rs-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<version>${jersey.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>jakarta.ws.rs</groupId>
					<artifactId>jakarta.ws.rs-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.gmaven</groupId>
										<artifactId>gmaven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>testCompile</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.gmaven</groupId>
										<artifactId>gmaven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>generateTestStubs</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-enforcer-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>display-info</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
